/**
 */
package de.hsu.grafcet.provider;

import de.hsu.grafcet.util.GrafcetAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class GrafcetItemProviderAdapterFactory extends GrafcetAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public GrafcetItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.hsu.grafcet.Grafcet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GrafcetItemProvider grafcetItemProvider;

	/**
	 * This creates an adapter for a {@link de.hsu.grafcet.Grafcet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGrafcetAdapter() {
		if (grafcetItemProvider == null) {
			grafcetItemProvider = new GrafcetItemProvider(this);
		}

		return grafcetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.hsu.grafcet.VariableDeclarationContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableDeclarationContainerItemProvider variableDeclarationContainerItemProvider;

	/**
	 * This creates an adapter for a {@link de.hsu.grafcet.VariableDeclarationContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableDeclarationContainerAdapter() {
		if (variableDeclarationContainerItemProvider == null) {
			variableDeclarationContainerItemProvider = new VariableDeclarationContainerItemProvider(this);
		}

		return variableDeclarationContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.hsu.grafcet.PartialGrafcet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PartialGrafcetItemProvider partialGrafcetItemProvider;

	/**
	 * This creates an adapter for a {@link de.hsu.grafcet.PartialGrafcet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPartialGrafcetAdapter() {
		if (partialGrafcetItemProvider == null) {
			partialGrafcetItemProvider = new PartialGrafcetItemProvider(this);
		}

		return partialGrafcetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.hsu.grafcet.MacrostepExpansion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MacrostepExpansionItemProvider macrostepExpansionItemProvider;

	/**
	 * This creates an adapter for a {@link de.hsu.grafcet.MacrostepExpansion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMacrostepExpansionAdapter() {
		if (macrostepExpansionItemProvider == null) {
			macrostepExpansionItemProvider = new MacrostepExpansionItemProvider(this);
		}

		return macrostepExpansionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.hsu.grafcet.Node} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeItemProvider nodeItemProvider;

	/**
	 * This creates an adapter for a {@link de.hsu.grafcet.Node}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeAdapter() {
		if (nodeItemProvider == null) {
			nodeItemProvider = new NodeItemProvider(this);
		}

		return nodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.hsu.grafcet.InitializableType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InitializableTypeItemProvider initializableTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.hsu.grafcet.InitializableType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInitializableTypeAdapter() {
		if (initializableTypeItemProvider == null) {
			initializableTypeItemProvider = new InitializableTypeItemProvider(this);
		}

		return initializableTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.hsu.grafcet.EnclosingStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnclosingStepItemProvider enclosingStepItemProvider;

	/**
	 * This creates an adapter for a {@link de.hsu.grafcet.EnclosingStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnclosingStepAdapter() {
		if (enclosingStepItemProvider == null) {
			enclosingStepItemProvider = new EnclosingStepItemProvider(this);
		}

		return enclosingStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.hsu.grafcet.Step} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StepItemProvider stepItemProvider;

	/**
	 * This creates an adapter for a {@link de.hsu.grafcet.Step}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStepAdapter() {
		if (stepItemProvider == null) {
			stepItemProvider = new StepItemProvider(this);
		}

		return stepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.hsu.grafcet.Transition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransitionItemProvider transitionItemProvider;

	/**
	 * This creates an adapter for a {@link de.hsu.grafcet.Transition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransitionAdapter() {
		if (transitionItemProvider == null) {
			transitionItemProvider = new TransitionItemProvider(this);
		}

		return transitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.hsu.grafcet.Synchronization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SynchronizationItemProvider synchronizationItemProvider;

	/**
	 * This creates an adapter for a {@link de.hsu.grafcet.Synchronization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSynchronizationAdapter() {
		if (synchronizationItemProvider == null) {
			synchronizationItemProvider = new SynchronizationItemProvider(this);
		}

		return synchronizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.hsu.grafcet.Macrostep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MacrostepItemProvider macrostepItemProvider;

	/**
	 * This creates an adapter for a {@link de.hsu.grafcet.Macrostep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMacrostepAdapter() {
		if (macrostepItemProvider == null) {
			macrostepItemProvider = new MacrostepItemProvider(this);
		}

		return macrostepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.hsu.grafcet.EntryStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntryStepItemProvider entryStepItemProvider;

	/**
	 * This creates an adapter for a {@link de.hsu.grafcet.EntryStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntryStepAdapter() {
		if (entryStepItemProvider == null) {
			entryStepItemProvider = new EntryStepItemProvider(this);
		}

		return entryStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.hsu.grafcet.ExitStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExitStepItemProvider exitStepItemProvider;

	/**
	 * This creates an adapter for a {@link de.hsu.grafcet.ExitStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExitStepAdapter() {
		if (exitStepItemProvider == null) {
			exitStepItemProvider = new ExitStepItemProvider(this);
		}

		return exitStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.hsu.grafcet.Arc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArcItemProvider arcItemProvider;

	/**
	 * This creates an adapter for a {@link de.hsu.grafcet.Arc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArcAdapter() {
		if (arcItemProvider == null) {
			arcItemProvider = new ArcItemProvider(this);
		}

		return arcItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.hsu.grafcet.ActionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionTypeItemProvider actionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.hsu.grafcet.ActionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionTypeAdapter() {
		if (actionTypeItemProvider == null) {
			actionTypeItemProvider = new ActionTypeItemProvider(this);
		}

		return actionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.hsu.grafcet.ForcingOrder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForcingOrderItemProvider forcingOrderItemProvider;

	/**
	 * This creates an adapter for a {@link de.hsu.grafcet.ForcingOrder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForcingOrderAdapter() {
		if (forcingOrderItemProvider == null) {
			forcingOrderItemProvider = new ForcingOrderItemProvider(this);
		}

		return forcingOrderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.hsu.grafcet.Action} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionItemProvider actionItemProvider;

	/**
	 * This creates an adapter for a {@link de.hsu.grafcet.Action}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionAdapter() {
		if (actionItemProvider == null) {
			actionItemProvider = new ActionItemProvider(this);
		}

		return actionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.hsu.grafcet.StoredAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StoredActionItemProvider storedActionItemProvider;

	/**
	 * This creates an adapter for a {@link de.hsu.grafcet.StoredAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStoredActionAdapter() {
		if (storedActionItemProvider == null) {
			storedActionItemProvider = new StoredActionItemProvider(this);
		}

		return storedActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.hsu.grafcet.ContinuousAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContinuousActionItemProvider continuousActionItemProvider;

	/**
	 * This creates an adapter for a {@link de.hsu.grafcet.ContinuousAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContinuousActionAdapter() {
		if (continuousActionItemProvider == null) {
			continuousActionItemProvider = new ContinuousActionItemProvider(this);
		}

		return continuousActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.hsu.grafcet.ActionLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionLinkItemProvider actionLinkItemProvider;

	/**
	 * This creates an adapter for a {@link de.hsu.grafcet.ActionLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionLinkAdapter() {
		if (actionLinkItemProvider == null) {
			actionLinkItemProvider = new ActionLinkItemProvider(this);
		}

		return actionLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.hsu.grafcet.TimeCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeConditionItemProvider timeConditionItemProvider;

	/**
	 * This creates an adapter for a {@link de.hsu.grafcet.TimeCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeConditionAdapter() {
		if (timeConditionItemProvider == null) {
			timeConditionItemProvider = new TimeConditionItemProvider(this);
		}

		return timeConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.hsu.grafcet.Condition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionItemProvider conditionItemProvider;

	/**
	 * This creates an adapter for a {@link de.hsu.grafcet.Condition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionAdapter() {
		if (conditionItemProvider == null) {
			conditionItemProvider = new ConditionItemProvider(this);
		}

		return conditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.hsu.grafcet.ProcessGrafcet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProcessGrafcetItemProvider processGrafcetItemProvider;

	/**
	 * This creates an adapter for a {@link de.hsu.grafcet.ProcessGrafcet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProcessGrafcetAdapter() {
		if (processGrafcetItemProvider == null) {
			processGrafcetItemProvider = new ProcessGrafcetItemProvider(this);
		}

		return processGrafcetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.hsu.grafcet.ControlGrafcet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlGrafcetItemProvider controlGrafcetItemProvider;

	/**
	 * This creates an adapter for a {@link de.hsu.grafcet.ControlGrafcet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlGrafcetAdapter() {
		if (controlGrafcetItemProvider == null) {
			controlGrafcetItemProvider = new ControlGrafcetItemProvider(this);
		}

		return controlGrafcetItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (grafcetItemProvider != null)
			grafcetItemProvider.dispose();
		if (variableDeclarationContainerItemProvider != null)
			variableDeclarationContainerItemProvider.dispose();
		if (partialGrafcetItemProvider != null)
			partialGrafcetItemProvider.dispose();
		if (macrostepExpansionItemProvider != null)
			macrostepExpansionItemProvider.dispose();
		if (nodeItemProvider != null)
			nodeItemProvider.dispose();
		if (initializableTypeItemProvider != null)
			initializableTypeItemProvider.dispose();
		if (enclosingStepItemProvider != null)
			enclosingStepItemProvider.dispose();
		if (stepItemProvider != null)
			stepItemProvider.dispose();
		if (transitionItemProvider != null)
			transitionItemProvider.dispose();
		if (synchronizationItemProvider != null)
			synchronizationItemProvider.dispose();
		if (macrostepItemProvider != null)
			macrostepItemProvider.dispose();
		if (entryStepItemProvider != null)
			entryStepItemProvider.dispose();
		if (exitStepItemProvider != null)
			exitStepItemProvider.dispose();
		if (arcItemProvider != null)
			arcItemProvider.dispose();
		if (actionTypeItemProvider != null)
			actionTypeItemProvider.dispose();
		if (forcingOrderItemProvider != null)
			forcingOrderItemProvider.dispose();
		if (actionItemProvider != null)
			actionItemProvider.dispose();
		if (storedActionItemProvider != null)
			storedActionItemProvider.dispose();
		if (continuousActionItemProvider != null)
			continuousActionItemProvider.dispose();
		if (actionLinkItemProvider != null)
			actionLinkItemProvider.dispose();
		if (timeConditionItemProvider != null)
			timeConditionItemProvider.dispose();
		if (conditionItemProvider != null)
			conditionItemProvider.dispose();
		if (processGrafcetItemProvider != null)
			processGrafcetItemProvider.dispose();
		if (controlGrafcetItemProvider != null)
			controlGrafcetItemProvider.dispose();
	}

}
